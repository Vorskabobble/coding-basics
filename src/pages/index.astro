---
import { Content } from "./hello.md";
---

<html lang="en">
    <head>
        <meta charset="utf-8" />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <meta name="viewport" content="width=device-width" />
        <meta name="generator" content={Astro.generator} />

        <link rel="stylesheet" href="css/style.css" />
        <link rel="stylesheet" href="css/scroll-down.css" />
        <link rel="stylesheet" href="css/fade-in.css" />

        <title>Astro</title>
    </head>
    <body>
        <h1>Understanding Git and Github</h1>
        <article>
            <h2>Git and GitHub</h2>
            <h3>What is git?</h3>
            <p>
                Git is a tool that is used to manage and version the source
                files to software. It is able to track the changes in a file and
                allows you to commit those changes which is like taking a
                snapshot in time of the code. This can then be revisited,
                compared and even used to overwrite later changes.
            </p>
            <p>
                Git works using repositories which are like a folder on your
                computer. Each repository holds all the files for your project
                and some secret files ðŸ¤« git uses to track the history of the
                repository.
            </p>
            <h3>What is GitHub?</h3>
            <p>
                GitHub is an online tool that hosts git repositories. This
                allows you to collaborate with other people in the same codebase
                easily.
            </p>
        </article>

        <span class="scroll-down">SCROLL DOWN</span>

        <article class="fade-in">
            <h2>Creating a new repository with existing code</h2>
            <p>
                There are two main steps when creating a repository from
                existing code. Turning your existing project into a git repo and
                uploading that to a repo in GitHub which will also need
                creating. A lot of devs and tutorials use the git command line
                interface (CLI) as this is the original git tool. It can however
                be simpler to use a tool such as GitHub Desktop or Visual Studio
                Code.
            </p>

            <div class="text-image-grid">
                <div>
                    <h3>Using VS Code</h3>
                    <p>
                        VS Code has a built in interface for using git which can
                        also be used for initialising repositories and uploading
                        them directly to GitHub. This option will require the
                        git CLI to be installed as that is what VSCode uses
                        under the hood.
                    </p>
                    <ol>
                        <li>Open the project in VSCode</li>
                        <li>
                            Navigate to the Source Control tab as seen in the
                            image
                        </li>
                        <li>
                            <ul>
                                <li>
                                    Click the the
                                    <q>Initialise Repository</q> button if you just
                                    want to add git
                                </li>
                                <li>
                                    Click the <q>Publish to Github</q> button to
                                    upload it directly to GitHub. Note the repository
                                    name will be the same as the folder.
                                </li>
                            </ul>
                        </li>
                        <li>
                            If you initialised the repo you will have to commit
                            your files and publish it the GitHub. Steps can be
                            found in the next section.
                        </li>
                    </ol>
                </div>
                <img
                    src="images/source control tab in vs code.png"
                    alt="The source control tab in visual studio code that shows the initialise button and a upload to GitHub button."
                />
                <div>
                    <h3>Using the GitHub Desktop app</h3>
                    <p>
                        The GitHub desktop app can be a bit trickier to use to
                        add git to a new repository. The most fool proof way is
                        documented below but it isn't the only way.
                    </p>
                    <ol>
                        <li>
                            Click the <q>Current Repository</q> button in the top
                            left
                        </li>
                        <li>
                            Click <q>Add</q> and then
                            <q>Add Existing Repository...</q>
                        </li>
                        <li>
                            In the dialog that pops up click
                            <q>Choose...</q> and navigate to the project folder
                        </li>
                        <li>
                            A warning will appear stating the folder is not a
                            git repository. Click the
                            <q>create repository</q> link in the warning
                            <ul>
                                <li>This will show a new dialog</li>
                                <li>
                                    All of the details will be pre populated so
                                    you don't have to change anything.
                                </li>
                            </ul>
                        </li>
                        <li>
                            Click the <q>Create Repository</q> Button
                            <ul>
                                <li>
                                    This will create the repository and create
                                    an initial commit with all of the files in
                                    the folder
                                </li>
                            </ul>
                        </li>
                        <li>
                            Finally, to create the repository in GitHub click
                            the <q>Publish to GitHub</q> button on the top right
                        </li>
                    </ol>
                </div>
                <div>
                    <img
                        src="images/github desktop add existing.png"
                        alt="The GitHub app with the repo menu open and the add existing repository button highlighted"
                    />
                    <img
                        src="images/add local repo dialog.png"
                        alt="Add Local Repository dialog in the GitHub Desktop app"
                    />
                    <img
                        src="images/not git warning.png"
                        alt="Add Local Repository dialog in the GitHub Desktop app"
                    />
                    <img
                        src="images/publish repository button.png"
                        alt="The GitHub app with the publish repository button in the top right highlighted"
                    />
                </div>
            </div>
        </article>
    </body>
</html>

<script>
    /* 
        JavaScript gives us an IntersectionObserver class that lets
        us know when an element overlaps with another element. We tell
        an observer to keep its eye on some html elements. When those elements
        get too close to another element the observer will let us know.
    */

    /* 
        Here we set the options for the observer.
        By default it will use the viewport (what you can see on screen)
        as the intersection test.
        The threshold is how much of our observed element needs to overlap
        the viewport (or other element if we specified).
        Currently 30% of the element needs to overlap before we will know.
    */
    const observerOptions = {
        threshold: 0.3,
    };

    // This is the callback function that will get called when our
    // observation criteria is met
    let addIsVisibleClass = (entries, observer) => {
        entries
            //filter out any elements that aren't overlapping
            .filter((entry) => entry.isIntersecting)
            .forEach((entry) => {
                // Add the is-visible css class to the element
                entry.target.classList.add("is-visible");
                // Stop observing it so we keep getting notified
                observer.unobserve(entry.target);
            });
    };

    // Create the observer class, passing in our callback and options
    let observer = new IntersectionObserver(addIsVisibleClass, observerOptions);

    // Find all html elements that have the class fade-in
    let targets = document.querySelectorAll(".fade-in");
    targets.forEach((target) => {
        // Tell our observer to keep its eyes on the fade-in element
        observer.observe(target);
    });
</script>
